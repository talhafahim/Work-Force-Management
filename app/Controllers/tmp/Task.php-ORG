<?php

namespace App\Controllers;
use \Hermawan\DataTables\DataTable;
use App\Models\Model_Customer;
use App\Models\Model_Task;
use App\Models\Model_General;

class Task extends BaseController
{
	public function __construct(){

		parent::__construct();
		$this->db = \Config\Database::connect();
		$this->input = \Config\Services::request();
	}
	public function my_task()
	{
		if(isLoggedIn()){	
			$modelGeneral = new Model_General();
			$data['return_reason'] = $modelGeneral->get_return_reason()->get();
			return view('customer/my-task',$data);	
		}else{
			return redirect()->to(base_url('login'));
		}
	}
	//
	public function dashboard()
	{
		return view('cpanel/dashboard');
	}
	//
	public function empty()
	{
		return view('cpanel/empty');	
	}
	//
	public function show_assign_list(){
		if(isLoggedIn()){
			$id = session()->get('id');
			//
			$taskModel = new Model_Task();
			$builder = $taskModel->get_task(null,null,$id);
			//
			return DataTable::of($builder)->addNumbering('no')
			//
			->filter(function ($builder, $request) {
				if ($request->status)
					$builder->where('status', $request->status);
			})
			//
			->add('taskStatus', function($row){
				return '<span class="badge badge-soft-info" style="font-size:15px;">'.ucfirst($row->status).'</span>';
			})
			->add('action', function($row){
				$actionHtml = '<div class="btn-group">';
				if($row->status != 'complete' && $row->status != 'reject'){
					$actionHtml .= '<button type="button" id="updateUN"  class="btn btn-primary btn-sm" data-un="'. 				$row->un_number.'" task-id="'.$row->id.'"><i class="fa fa-tasks"></i></button>';
				}
				$actionHtml .= '	
				<a href="'.base_url().'/customer/view_detail/'.$row->id.'" class="btn btn-info btn-sm" title="View Detail"><i class="fa fa-info-circle"></i></a>
				</div>';
				return $actionHtml;
			})
			//
			->toJson(true);
			
		}
	}
	///
	public function task_detail(){
		$uri = new \CodeIgniter\HTTP\URI(current_url());
		$data['un'] = $uri->getSegment(3);
		$customerModel = new Model_Customer();
		$unCount = $customerModel->get_customer_info(null,$data['un'])->countAllResults();
		
		if(isLoggedIn() && $unCount > 0){
			//
			return view('customer/my-task-detail',$data);
		}else{
			return redirect()->to(base_url('login'));
		}
	}
	//////////////////////////////////
	public function show_update_modal_content(){
		$un_number = $this->input->getPost('un');
		$task_id = $this->input->getPost('id');
		$user_id = session()->get('id');
			//
		$customerModel = new Model_Customer();
		$taskDetail=$customerModel->get_customer_info($task_id)->get()->getRow();
			//
		$modelGeneral = new Model_General();
		$gateway = $modelGeneral->get_gateway(null,null,$user_id,'assigned')->get()->getResult();
		$data['gateway'] = array_column($gateway, 'serial');
			//
		$data['currentStatus'] =  $taskDetail->status;
		return json_encode($data);
	}
	//////////////////////////////////
	public function update_task(){
		if(isLoggedIn()){
			$modelCustomer = new Model_Customer();
			$modelGeneral = new Model_General();
			$modelTask = new Model_Task();
			//
			$error = null;
			$user_id = session()->get('id');
			$un_number = $this->input->getPost('un_number');
			$task_id = $this->input->getPost('task_id');
			$options = $this->input->getPost('options');
			$status = $this->input->getPost('status');
			$gateway = $this->input->getPost('gateway');
			$otherEquipment = $this->input->getPost('otherEquipment');
			$returnReason = $this->input->getPost('returnReason');
			$pic1 = $this->input->getFile('pic1');
			$pic2 = $this->input->getFile('pic2');
			$pic3 = $this->input->getFile('pic3');
			//
			$validation =  \Config\Services::validation();
			$validate = $this->validate([
				'status' => ['label' => 'Status', 'rules' => 'trim|required'],
				'options' => ['label' => 'Option', 'rules' => 'trim|required'],
			]);
			if(!$validate){
				$error = $validation->listErrors();
				$error = str_replace(array("\n", "\r"), '', $error);
				$error =  nl2br($error);
			}
			//
			if($status == 'reject' && empty($returnReason) ){
				$error = 'Please select reject reason';
			}
			//
			if($status == 'complete' && (empty($gateway) || empty($otherEquipment) )){
				$error = 'Please put gateway & other equipment';
			}
			//
			if(!empty($gateway) && $status == 'complete'){
				$checkGateway = $modelGeneral->get_gateway(null,$gateway,$user_id,'assigned')->countAllResults();
				if($checkGateway <= 0){
					$error = 'Error : Inavlid Gateway Serial';
				}	
			}
			//
			if($status == 'reject' && empty($_FILES['pic1']['name']) && empty($_FILES['pic2']['name']) && empty($_FILES['pic3']['name']) ){
				$checkPicRequire = $modelGeneral->get_return_reason($returnReason)->get()->getRow();
				if($checkPicRequire->pic_require == 1){
					$error = 'Provide atleast one picture';
				}
			}
			//
			if(empty($error)){
			//
				if($options == 'single'){
					$this->db->table('bo_customer_info')->where('id',$task_id)->where('assign_to',$user_id)->update(['status' => $status]);
				//
					if($status == 'complete'){
					//
						$modelGeneral->task_detail_insert($task_id, $gateway, $otherEquipment, null, $task_id.'-1.jpg', $task_id.'-2.jpg', $task_id.'-3.jpg');
					//
						$this->db->table('gateway')->where('serial',$gateway)->where('status','assigned')->update(['status' => 'used']);
					//
					}else if($status == 'reject'){
					//
						$modelGeneral->task_detail_insert($task_id, null, null, $returnReason, $task_id.'-1.jpg', $task_id.'-2.jpg', $task_id.'-3.jpg');
					//
					}
					//
					if(!empty($_FILES['pic1']['name'])){
						if(file_exists('./picture/'.$task_id.'-1.jpg')){
							unlink('./picture/'.$task_id.'-1.jpg');
						}
						$pic1->move('./picture',$task_id.'-1.jpg');
					}if(!empty($_FILES['pic2']['name'])){
						if(file_exists('./picture/'.$task_id.'-2.jpg')){
							unlink('./picture/'.$task_id.'-2.jpg');
						}
						$pic2->move('./picture',$task_id.'-2.jpg');
					}if(!empty($_FILES['pic3']['name'])){
						if(file_exists('./picture/'.$task_id.'-3.jpg')){
							unlink('./picture/'.$task_id.'-3.jpg');
						}
						$pic3->move('./picture',$task_id.'-3.jpg');
					}
					//
					create_action_log('task id '.$task_id);

				}else if($options == 'multiple'){
					$currTask = $modelCustomer->get_customer_info($task_id)->get()->getRow();
					//
					$taskarry = $modelTask->get_task(null,$currTask->un_number,$user_id,$currTask->status);
					//
					foreach($taskarry->get()->getResult() as $value){
						$task_id = $value->id;
						//
						if($status == 'complete'){
							//
							$modelGeneral->task_detail_insert($task_id, $gateway, $otherEquipment, null, $task_id.'-1.jpg', $task_id.'-2.jpg', $task_id.'-3.jpg');
							//
							$this->db->table('gateway')->where('serial',$gateway)->where('status','assigned')->update(['status' => 'used']);

						}else if($status == 'reject'){
							//
							$modelGeneral->task_detail_insert($task_id, null, null, $returnReason, $task_id.'-1.jpg', $task_id.'-2.jpg', $task_id.'-3.jpg');
						}
						//
						if(!empty($_FILES['pic1']['name']) && $pic1->isValid() && ! $pic1->hasMoved() ){
							if(file_exists('./picture/'.$task_id.'-1.jpg')){
								unlink('./picture/'.$task_id.'-1.jpg');
							}
							$pic1->move('./picture',$task_id.'-1.jpg');
						}if(!empty($_FILES['pic2']['name']) && $pic2->isValid() && ! $pic2->hasMoved()){
							if(file_exists('./picture/'.$task_id.'-2.jpg')){
								unlink('./picture/'.$task_id.'-2.jpg');
							}
							$pic2->move('./picture',$task_id.'-2.jpg');
						}if(!empty($_FILES['pic3']['name']) && $pic3->isValid() && ! $pic3->hasMoved()){
							if(file_exists('./picture/'.$task_id.'-3.jpg')){
								unlink('./picture/'.$task_id.'-3.jpg');
							}
							$pic3->move('./picture',$task_id.'-3.jpg');
						}
						//
						create_action_log('task id '.$task_id);
					}
					//
					$this->db->table('bo_customer_info')->where('un_number',$currTask->un_number)->where('assign_to',$user_id)->where('status',$currTask->status)->update(['status' => $status]);
				}
				return $this->response->setStatusCode(200)->setBody('Updated Successfully');
			}else{
				return $this->response->setStatusCode(401,$error);
			}
		}else{
			return $this->response->setStatusCode(401,'Session Timeout');
		}
	}
	//

	public function test(){
		$modelTask = new Model_Task();
		$taskarry = $modelTask->get_task();
		foreach($taskarry->get()->getResult() as $value){
			echo $value->id;
			echo '<br>';
		}
	}

}
